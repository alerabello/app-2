name: Build and Push to ECR + Deploy ECS

on:
  workflow_dispatch:
    inputs:
      aws_account:
        description: 'AWS Account to deploy to (develop, stage, prod)'
        required: true
        default: 'develop'
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fuelpoint-developer-app-2
  ECS_CLUSTER: ecs-cluster-developer
  ECS_SERVICE: SVG-Service-2-ECS

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.aws_account }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set role-to-assume
        run: |
          case "${{ github.event.inputs.aws_account }}" in
            prod)
              echo "role=${{ secrets.AWS_ROLE_ARN_PROD }}" >> $GITHUB_ENV
              ;;
            stage)
              echo "role=${{ secrets.AWS_ROLE_ARN_STAGE }}" >> $GITHUB_ENV
              ;;
            develop)
              echo "role=${{ secrets.AWS_ROLE_ARN_DEVELOP }}" >> $GITHUB_ENV
              ;;
            *)
              echo "❌ Invalid aws_account: ${{ github.event.inputs.aws_account }}"
              exit 1
              ;;
          esac

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.role }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build com Maven
        run: mvn clean package -DskipTests

      - name: Login no AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Criar tags da imagem
        id: ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URL=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY
          COMMIT_SHA=${GITHUB_SHA::7}
          echo "REPO_URL=$ECR_URL" >> $GITHUB_ENV
          echo "IMAGE_TAG=$COMMIT_SHA" >> $GITHUB_ENV
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t $REPO_URL:latest -t $REPO_URL:$IMAGE_TAG .

      - name: Push Docker images
        run: |
          docker push $REPO_URL:latest
          docker push $REPO_URL:$IMAGE_TAG

  approval:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.aws_account }}

    steps:
      - name: Request Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: alerabello
          minimum-approvals: 1
          additional-approved-words: 'Approve, Approved, approve, approved'
        timeout-minutes: 10

  deploy:
    needs: approval
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.aws_account }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.role }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ECS com nova imagem
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION